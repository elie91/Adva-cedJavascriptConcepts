/************ Closures  - The 1 pillars ***********/
/*

Closure is a combination of function and the lexical environment from which it was declared.
Closures allow a function to access variables from an enclosing scope or environment even after it leaves
the scope in which it was declared.
Closures are also called lexical scoping. (lexical: where it is written , scoping: what variable we have access)

They have benefits of : 
    - Memory Efficient
    - Encapsulation

Lorsque le js engine voit une fonction qui retourne une autre fonction, 
et qui utilise une var cens√© disparaitre lorsque la fonction principale est pop de la callstack
il va sauvegarder dans un endroit sp√©cial de la m√©moire, dans une sorte de boite √† closures, 
ces variables, et ne pas les supprimer (garbage collector) m√™me si elles n'ont pas actuellement de r√©f√©rence

---  1 :
*/
function callMeMaybe() {
    setTimeout(function () {
        console.log(callMe);
    }, 4000);
    const callMe = 'Hi!';
}
/*
Ici, la fonction va afficher Hi, au bout de 4 secondes
Il n'y a pas de probl√™me de hosting, bien que la variable soit d√©fini apr√®s, en tant que const
Ce qui se passe est: 
La function callMeMaybe() est appel√©
La function setTimeout est envoy√© √† la web api, qui attend et renvoie le callback
Pendant ce temps, callMeMaybe cr√©e la variable callMe, l'assigne, fini de s'√©xecuter, et est pop de la callstack
MAIS comme le JS Engine constate que la function setTimeout imbriqu√©e
 utilise callMe, il va cr√©er une closure, et permettre ainsi au callback du setTimeout d'utiliser callMe


--- 2 : Closures and memory
*/
function heavyDuty(item) {
    const bigArray = new Array(7000).fill('üòÑ')
    console.log('created!');
    return bigArray[item]
}

heavyDuty(699)
heavyDuty(699)
heavyDuty(699)
//Le probl√®me avec la fonction ici est qu'a chaque fois qu'on l'appelle, le bigArray est recr√©e √† chaque fois
//Dans un cas r√©el ou il s'agit d'une longue op√©ration par ex, cela n'est pas vraiment performant


function heavyDuty2() {
    const bigArray = new Array(7000).fill('üòÑ')
    console.log('created Again!')
    return function (item) {
        return bigArray[item]
    }
}
const getHeavyDuty = heavyDuty2();
getHeavyDuty(699)
getHeavyDuty(699)
getHeavyDuty(699)

//En utilisant plutot une closure, on rend la fonction tt de suite plus performante;
//Le bigArray va √™tre cr√©e une seule fois, lors de l'appel de heavyDuty2(), que l'on assigne √† une variable
//Comme elle retourne une autre fonction, on peut donc utiliser la variable pour appeler notre seconde fonction
//Donc, on ne sera rentr√© qu'une fois dans la 1er fonction, qui cr√©e notre array, et le console log ne sera affiche qu'1 fois
//Ici, c'est une closure, car heavyDuty2() est appel√©1 seule fois et pop de la callstack
//Mais on peut tjr utiliser le bigArray dans les appels suivants


//--- 3 : Closures and encapsulation
const makeNuclearButton = () => {
    let timeWithoutDestruction = 0;
    const passTime = () => timeWithoutDestruction++;
    const totalPeaceTime = () => timeWithoutDestruction;
    const launch = () => {
        timeWithoutDestruction = -1;
        return 'üí•';
    }

    setInterval(passTime, 1000);
    return { totalPeaceTime }
}

const ww3 = makeNuclearButton();
ww3.totalPeaceTime()
/*

L'int√©ret ici de cr√©er des fonctions imbriqu√©s, et de retourner un objet √† la fin, est 
afin d'encapsuler notre fonction. C'est √† dire, qu'ici, personne n'aura acc√®s √† l'ext√©rieur √† la
fonction launch(), mais uniquement √† la fonction totalPeaceTime
Donc, en cr√©ant des fonctions imbriqu√©s, qui utilisent des closures pour acc√©der aux variables de la 
fonction principale, on peut choisir les fonctions que l'on souhaite retourner, afin d'ajouter une couche 
de s√©curit√©

*/

/************ Exercices ***********/
const array = [1, 2, 3, 4];
for (var i = 0; i < array.length; i++) {
    setTimeout(function () {
        console.log('I am at index ' + i)
    }, 3000)
}

/*
After 4 seconde, the result is I am at index 4 , 4 times (due to event queue etc)
To fix this, we can use let. With let, the result is index 0 , index 1 ..
Because, with let, we create a new scop for each iteration ???? pas clair
On peut aussi r√©soudre ce probl√®me avec une closure
*/
const array = [1, 2, 3, 4];
for (var i = 0; i < array.length; i++) {
    (function (closureI) {
        setTimeout(function () {
            console.log('I am at index ' + closureI)
        }, 3000)
    })(i)
}
